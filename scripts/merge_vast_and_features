#!/bin/bash

if [ -z $1 ]; then
	echo "ERROR: pass path to the unzipped ctu13 dataset as an argument"
	echo "Usage: ./merge_vast_and_features <path>"
	echo "ARGS:"
	echo "  path: path to the ctu13 dataset"
	exit
fi

# Clean file path passed as argument
data_path=$(echo "$1" | tr -d '/')

if [ ! -d $data_path ]; then
	echo "ERROR: missing ctu13 dataset"
	echo "Run 'make pull_data' in the base of this project to pull the dataset."
	exit
fi

# For each scenario's data in the ctu13 dataset
for i in $(seq 1 13); do
	base="$data_path/$i"

	echo "Merging $base"

	vast_file="$base/captureAsVast.txt"
	feat_file="$base/features.txt"
	src_ip_file="$base/src_ips.txt"
	dest_ip_file="$base/dest_ips.txt"
	timestamp_file="$base/timestamps.txt"
	output_file_1="$base/merged1.txt"
	output_file_2="$base/merged2.txt"
	output_file_3="$base/merged.txt"
	ben_file="$base/benign.txt"
	bot_file="$base/bot.txt"

	# Make sure that the vast file exists
	if [ ! -f $vast_file ]; then
		echo "ERROR: missing $vast_file"
		exit
	fi

	# Make sure that the feature file exists
	if [ ! -f $feat_file ]; then
		echo "ERROR: missing $feat_file"
		exit
	fi

	# Make sure the the vast and feature files are the same length
	vast_lc=$(wc -l $vast_file | awk '{print $1}')
	feat_lc=$(wc -l $feat_file | awk '{print $1}')
	if [ $vast_lc -ne $feat_lc ]; then
		echo "ERROR: line counts between '$vast_file' and '$feat_file' don't match"
		exit
	fi

	# Get all of the source IPs from the vast file
	awk -F ',' '{print $7}' $vast_file >$src_ip_file

	# Get all of the destination IPs from the vast file
	awk -F ',' '{print $8}' $vast_file >$dest_ip_file

	# Get all of the timestamps from the vast file
	awk -F ',' '{print $3}' $vast_file >$timestamp_file

	# Prepend all destination IPs to the feature file
	paste -d ',' $dest_ip_file $feat_file >$output_file_1

	# Prepend all source IPs to the feature file
	paste -d ',' $src_ip_file $output_file_1 >$output_file_2

	# Prepend all timestamps to the feature file
	paste -d ',' $timestamp_file $output_file_2 >$output_file_3

	# Remove the temporary merged files
	for file in $output_file_1 $output_file_2; do
		rm $file
	done

	# Separate out the benign entries
	awk -F ',' '{ if ($4==0) { print $0 }}' $output_file_3 >$ben_file

	# Separate out the bot entries
	awk -F ',' '{ if ($4==1) { print $0 }}' $output_file_3 >$bot_file
done

# Aggregate benign and bot files
echo "Aggregating benign and bot files..."
if [[ ! -d data ]]; then
	mkdir data
fi

if [[ -f data/agg_benign_traffic.txt ]]; then
	rm data/agg_benign_traffic.txt
fi

if [[ -f data/agg_bot_traffic.txt ]]; then
	rm data/agg_bot_traffic.txt
fi

for i in $(seq 1 13); do
	cat ctu13/$i/benign.txt >>data/agg_benign_traffic.txt
	cat ctu13/$i/bot.txt >>data/agg_bot_traffic.txt
done

ben_line_count=$(find ctu13 -name benign.txt | xargs wc -l | tail -1 | awk '{print $1}')
agg_ben_line_count=$(wc -l data/agg_benign_traffic.txt | awk '{print $1}')
if [[ $ben_line_count -ne $agg_ben_line_count ]]; then
	echo "Warning: line count of aggregated benign traffic differs from total of individual benign file line count."
fi

bot_line_count=$(find ctu13 -name bot.txt | xargs wc -l | tail -1 | awk '{print $1}')
agg_bot_line_count=$(wc -l data/agg_bot_traffic.txt | awk '{print $1}')
if [[ $bot_line_count -ne $agg_bot_line_count ]]; then
	echo "Warning: line count of aggregated bot traffic differs from total of individual bot file line count."
fi
